{"version":3,"sources":["assets/my_location.svg","assets/confirm.svg","assets/location_search.svg","components/SplashScreen.js","components/Map.js","components/Landmark.js","components/LandmarkList.js","containers/NearWiki.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","splashScreen","props","className","src","svg","alt","message","Map","userLocation","this","coords","latitude","longitude","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","Marker","position","Popup","React","Component","Landmark","landmarkCoords","lat","lon","landmarkLocation","getDistance","landmarkImgUrl","landmark","original","source","landmarkDistance","getDistanceFromUserLocation","coordinates","description","toTitleCase","Item","Image","size","Content","verticalAlign","Header","title","Meta","Description","Extra","Button","icon","content","labelPosition","floated","LandmarkList","Object","keys","landmarks","map","landmarkKey","key","pageid","NearWiki","state","landmarkMarkers","getLandmarksNearUserLocation","getLandmarkMarkers","params","action","generator","prop","piprop","ggscoord","ggsradius","format","forEach","that","fetch","then","response","json","pages","query","setState","console","log","catch","error","Group","divided","unstackable","App","isGeolocationAvailable","isGeolocationEnabled","location_search","location_access","location_support","geolocated","positionOptions","enableHighAccuracy","watchPosition","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b197a33f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/my_location.8ccde75d.svg\";","module.exports = __webpack_public_path__ + \"static/media/confirm.da01aa0e.svg\";","module.exports = __webpack_public_path__ + \"static/media/location_search.a9bf295f.svg\";","import React from \"react\";\nimport \"./SplashScreen.css\";\n\nconst splashScreen = props => {\n  return (\n    <div className=\"splashScreen\">\n      <header className=\"splashScreen-header\">\n        <img src={props.svg} className=\"splashScreen-svg\" alt={props.message} />\n        <p className=\"splashScreen-text\">{props.message}</p>\n      </header>\n    </div>\n  );\n};\n\nexport default splashScreen;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"./Map.css\";\n\nclass Map extends React.Component {\n  render() {\n    const userLocation = [\n      this.props.coords.latitude,\n      this.props.coords.longitude\n    ];\n    return (\n      <LeafletMap\n        center={userLocation}\n        zoom={15}\n        maxZoom={25}\n        attributionControl={false}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" />\n        <Marker position={userLocation}>\n          <Popup>You are here.</Popup>\n        </Marker>\n      </LeafletMap>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport { Button, Item } from \"semantic-ui-react\";\nimport { getDistance } from \"geolib\";\nimport \"@gouch/to-title-case\";\nimport \"./Landmark.css\";\n\nclass Landmark extends Component {\n  getDistanceFromUserLocation(landmarkCoords) {\n    let userLocation = {\n      lat: this.props.userLocation.latitude,\n      lon: this.props.userLocation.longitude\n    };\n\n    let landmarkLocation = {\n      lat: landmarkCoords[0].lat,\n      lon: landmarkCoords[0].lon\n    };\n\n    const distanceInMeters = getDistance(userLocation, landmarkLocation);\n    return distanceInMeters + \" metres away\";\n  }\n\n  render() {\n    let landmarkImgUrl =\n      \"https://react.semantic-ui.com/images/wireframe/image.png\";\n    if (this.props.landmark.original) {\n      landmarkImgUrl = this.props.landmark.original.source;\n    }\n\n    let landmarkDistance = this.getDistanceFromUserLocation(\n      this.props.landmark.coordinates\n    );\n\n    let description = \"\";\n    if (this.props.landmark.description) {\n      description = this.props.landmark.description.toTitleCase();\n    }\n\n    return (\n      <Item className=\"landmark\">\n        <Item.Image src={landmarkImgUrl} size=\"small\" />\n        <Item.Content verticalAlign=\"bottom\">\n          <Item.Header>{this.props.landmark.title}</Item.Header>\n          <Item.Meta>\n            <span className=\"location\">{landmarkDistance}</span>\n          </Item.Meta>\n          <Item.Description>{description}</Item.Description>\n          <Item.Extra>\n            <Button\n              icon=\"external alternate\"\n              content=\"Open in Maps\"\n              labelPosition=\"right\"\n              floated=\"right\"\n            />\n            <Button icon=\"wikipedia w\" floated=\"right\" />\n          </Item.Extra>\n        </Item.Content>\n      </Item>\n    );\n  }\n}\n\nexport default Landmark;\n","import React, { Component } from \"react\";\nimport Landmark from \"./Landmark\";\n\nclass LandmarkList extends Component {\n  render() {\n    return Object.keys(this.props.landmarks).map(landmarkKey => {\n      return (\n        <Landmark\n          key={this.props.landmarks[landmarkKey].pageid}\n          landmark={this.props.landmarks[landmarkKey]}\n          userLocation={this.props.userLocation}\n        />\n      );\n    });\n  }\n}\n\nexport default LandmarkList;\n","import React, { Component } from \"react\";\nimport Map from \"../components/Map\";\nimport { Item } from \"semantic-ui-react\";\nimport LandmarkList from \"../components/LandmarkList\";\nimport \"./NearWiki.css\";\n\nclass NearWiki extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      landmarks: {},\n      landmarkMarkers: []\n    };\n  }\n\n  componentDidMount() {\n    this.getLandmarksNearUserLocation();\n    this.getLandmarkMarkers();\n  }\n\n  getLandmarksNearUserLocation() {\n    let url = \"https://en.wikipedia.org/w/api.php\";\n    let coord = this.props.coords.latitude + \"|\" + this.props.coords.longitude;\n\n    let params = {\n      action: \"query\",\n      generator: \"geosearch\",\n      prop: \"coordinates|pageimages|description|info\",\n      piprop: \"original\",\n      ggscoord: coord,\n      ggsradius: 2000,\n      format: \"json\"\n    };\n\n    url = url + \"?origin=*\";\n    Object.keys(params).forEach(function(key) {\n      url += \"&\" + key + \"=\" + params[key];\n    });\n\n    let that = this;\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(response) {\n        let pages = response.query.pages;\n        that.setState({\n          landmarks: pages\n        });\n        console.log(pages);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  getLandmarkMarkers() {\n    this.setState({\n      landmarkMarkers: []\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Map coords={this.props.coords} />\n        <Item.Group className=\"landmarkList\" divided unstackable>\n          <LandmarkList\n            landmarks={this.state.landmarks}\n            userLocation={this.props.coords}\n          />\n        </Item.Group>\n      </div>\n    );\n  }\n}\n\nexport default NearWiki;\n","import React, { Component } from \"react\";\nimport SplashScreen from \"../components/SplashScreen\";\nimport NearWiki from \"./NearWiki\";\nimport { geolocated } from \"react-geolocated\";\nimport location_support from \"../assets/my_location.svg\";\nimport location_access from \"../assets/confirm.svg\";\nimport location_search from \"../assets/location_search.svg\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    if (!this.props.isGeolocationAvailable) {\n      return (\n        <SplashScreen\n          svg={location_support}\n          message={\"Your browser does not support the Geolocation API.\"}\n        />\n      );\n    } else if (!this.props.isGeolocationEnabled) {\n      return (\n        <SplashScreen\n          svg={location_access}\n          message={\"Please enable location access.\"}\n        />\n      );\n    } else if (this.props.coords) {\n      return <NearWiki coords={this.props.coords} />;\n    } else {\n      return (\n        <SplashScreen\n          svg={location_search}\n          message={\"Finding landmarks near you...\"}\n        />\n      );\n    }\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: true\n  },\n  watchPosition: true,\n  userDecisionTimeout: 5000\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}