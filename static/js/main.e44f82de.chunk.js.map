{"version":3,"sources":["assets/my_location.svg","assets/confirm.svg","assets/location_search.svg","components/SplashScreen.js","components/LandmarkMarker.js","components/LandmarkMarkerList.js","components/Map.js","components/Landmark.js","components/LandmarkList.js","containers/NearWiki.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","splashScreen","props","className","src","svg","alt","message","LandmarkMarker","Marker","position","Popup","content","LandmarkMarkerList","items","markers","map","markerInfo","key","Map","landmarks","Object","keys","landmarkKey","currLandmark","currLandmarkInfo","pageid","title","coordinates","lat","lon","push","userLocation","this","coords","latitude","longitude","getMarkerData","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","length","React","Component","Landmark","landmarkCoords","landmarkLocation","getDistance","str","delimiter","split","join","landmark","searchQuery","getStrWithDelimiter","landmarkImgUrl","original","source","landmarkDistance","getDistanceFromUserLocation","description","toTitleCase","wikiUrl","getWikiUrl","mapsUrl","getMapsUrl","Item","Image","size","Content","verticalAlign","Header","Meta","Description","Extra","Button","icon","labelPosition","floated","as","href","target","LandmarkList","NearWiki","state","getLandmarksNearUserLocation","params","action","generator","prop","piprop","ggscoord","ggsradius","ggslimit","format","forEach","that","fetch","then","response","json","pages","query","setState","catch","error","console","log","Group","divided","unstackable","App","isGeolocationAvailable","isGeolocationEnabled","location_search","location_access","location_support","geolocated","positionOptions","enableHighAccuracy","watchPosition","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e44f82de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/my_location.8ccde75d.svg\";","module.exports = __webpack_public_path__ + \"static/media/confirm.da01aa0e.svg\";","module.exports = __webpack_public_path__ + \"static/media/location_search.a9bf295f.svg\";","import React from \"react\";\nimport \"./SplashScreen.css\";\n\nconst splashScreen = props => {\n  return (\n    <div className=\"splashScreen\">\n      <header className=\"splashScreen-header\">\n        <img src={props.svg} className=\"splashScreen-svg\" alt={props.message} />\n        <p className=\"splashScreen-text\">{props.message}</p>\n      </header>\n    </div>\n  );\n};\n\nexport default splashScreen;\n","import React from \"react\";\nimport { Marker, Popup } from \"react-leaflet\";\n\nconst LandmarkMarker = props => {\n  return (\n    <Marker position={props.position}>\n      <Popup>{props.content}</Popup>\n    </Marker>\n  );\n};\n\nexport default LandmarkMarker;\n","import React, { Fragment } from \"react\";\nimport LandmarkMarker from \"./LandmarkMarker\";\n\nconst LandmarkMarkerList = props => {\n  const items = props.markers.map(markerInfo => (\n    <LandmarkMarker\n      key={markerInfo.key}\n      position={markerInfo.position}\n      content={markerInfo.content}\n    />\n  ));\n  return <Fragment>{items}</Fragment>;\n};\n\nexport default LandmarkMarkerList;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"./Map.css\";\nimport LandmarkMarkerList from \"./LandmarkMarkerList\";\n\nclass Map extends React.Component {\n  getMarkerData(landmarks) {\n    let markers = [];\n\n    Object.keys(landmarks).map(landmarkKey => {\n      const currLandmark = landmarks[landmarkKey];\n\n      let currLandmarkInfo = {\n        key: currLandmark.pageid,\n        content: currLandmark.title\n      };\n\n      if (currLandmark.coordinates) {\n        currLandmarkInfo = {\n          ...currLandmarkInfo,\n          position: [\n            currLandmark.coordinates[0].lat,\n            currLandmark.coordinates[0].lon\n          ]\n        };\n\n        // Add marker on the map only if coordinates are available\n        markers.push(currLandmarkInfo);\n      }\n\n      return null;\n    });\n\n    return markers;\n  }\n\n  render() {\n    const userLocation = [\n      this.props.coords.latitude,\n      this.props.coords.longitude\n    ];\n\n    const markers = this.getMarkerData(this.props.landmarks);\n\n    return (\n      <LeafletMap\n        center={userLocation}\n        zoom={15}\n        maxZoom={25}\n        attributionControl={false}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={false}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" />\n        <Marker position={userLocation}>\n          <Popup>You are here.</Popup>\n        </Marker>\n        {markers.length > 0 ? <LandmarkMarkerList markers={markers} /> : null}\n      </LeafletMap>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport { Button, Item } from \"semantic-ui-react\";\nimport { getDistance } from \"geolib\";\nimport \"@gouch/to-title-case\";\nimport \"./Landmark.css\";\n\nclass Landmark extends Component {\n  getDistanceFromUserLocation(landmarkCoords) {\n    let userLocation = {\n      lat: this.props.userLocation.latitude,\n      lon: this.props.userLocation.longitude\n    };\n\n    let landmarkLocation = {\n      lat: landmarkCoords[0].lat,\n      lon: landmarkCoords[0].lon\n    };\n\n    const distanceInMeters = getDistance(userLocation, landmarkLocation);\n    return distanceInMeters + \" metres away\";\n  }\n\n  getStrWithDelimiter(str, delimiter) {\n    return str.split(\" \").join(delimiter);\n  }\n\n  getWikiUrl(landmark) {\n    const searchQuery = this.getStrWithDelimiter(landmark.title, \"_\");\n    return `https://www.wikipedia.org/wiki/${searchQuery}`;\n  }\n\n  getMapsUrl(landmark) {\n    const searchQuery = this.getStrWithDelimiter(landmark.title, \"+\");\n    return `https://www.google.com/maps/search/${searchQuery}`;\n  }\n\n  render() {\n    let landmarkImgUrl =\n      \"https://react.semantic-ui.com/images/wireframe/image.png\";\n    if (this.props.landmark.original) {\n      landmarkImgUrl = this.props.landmark.original.source;\n    }\n\n    let landmarkDistance = \"\";\n    if (this.props.landmark.coordinates) {\n      landmarkDistance = this.getDistanceFromUserLocation(\n        this.props.landmark.coordinates\n      );\n    }\n\n    let description = \"\";\n    if (this.props.landmark.description) {\n      description = this.props.landmark.description.toTitleCase();\n    }\n\n    let wikiUrl = this.getWikiUrl(this.props.landmark);\n    let mapsUrl = this.getMapsUrl(this.props.landmark);\n\n    return (\n      <Item className=\"landmark\">\n        <Item.Image src={landmarkImgUrl} size=\"small\" />\n        <Item.Content verticalAlign=\"bottom\">\n          <Item.Header>{this.props.landmark.title.toTitleCase()}</Item.Header>\n          <Item.Meta>\n            <span className=\"location\">{landmarkDistance}</span>\n          </Item.Meta>\n          <Item.Description>{description}</Item.Description>\n          <Item.Extra>\n            <Button\n              icon=\"external alternate\"\n              content=\"Google Maps\"\n              labelPosition=\"right\"\n              floated=\"right\"\n              as=\"a\"\n              href={mapsUrl}\n              target=\"_blank\"\n            />\n            <Button\n              icon=\"wikipedia w\"\n              floated=\"right\"\n              as=\"a\"\n              href={wikiUrl}\n              target=\"_blank\"\n            />\n          </Item.Extra>\n        </Item.Content>\n      </Item>\n    );\n  }\n}\n\nexport default Landmark;\n","import React, { Component } from \"react\";\nimport Landmark from \"./Landmark\";\n\nclass LandmarkList extends Component {\n  render() {\n    return Object.keys(this.props.landmarks).map(landmarkKey => {\n      return (\n        <Landmark\n          key={this.props.landmarks[landmarkKey].pageid}\n          landmark={this.props.landmarks[landmarkKey]}\n          userLocation={this.props.userLocation}\n        />\n      );\n    });\n  }\n}\n\nexport default LandmarkList;\n","import React, { Component } from \"react\";\nimport Map from \"../components/Map\";\nimport { Item } from \"semantic-ui-react\";\nimport LandmarkList from \"../components/LandmarkList\";\nimport \"./NearWiki.css\";\n\nclass NearWiki extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      landmarks: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getLandmarksNearUserLocation();\n  }\n\n  getLandmarksNearUserLocation() {\n    let url = \"https://en.wikipedia.org/w/api.php\";\n    let coord = this.props.coords.latitude + \"|\" + this.props.coords.longitude;\n\n    let params = {\n      action: \"query\",\n      generator: \"geosearch\",\n      prop: \"coordinates|pageimages|description|info\",\n      piprop: \"original\",\n      ggscoord: coord,\n      ggsradius: 2000,\n      ggslimit: 20,\n      format: \"json\"\n    };\n\n    url = url + \"?origin=*\";\n    Object.keys(params).forEach(function(key) {\n      url += \"&\" + key + \"=\" + params[key];\n    });\n\n    let that = this;\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(response) {\n        let pages = response.query.pages;\n        that.setState({\n          landmarks: pages\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Map landmarks={this.state.landmarks} coords={this.props.coords} />\n        <Item.Group className=\"landmarkList\" divided unstackable>\n          <LandmarkList\n            landmarks={this.state.landmarks}\n            userLocation={this.props.coords}\n          />\n        </Item.Group>\n      </div>\n    );\n  }\n}\n\nexport default NearWiki;\n","import React, { Component } from \"react\";\nimport SplashScreen from \"../components/SplashScreen\";\nimport NearWiki from \"./NearWiki\";\nimport { geolocated } from \"react-geolocated\";\nimport location_support from \"../assets/my_location.svg\";\nimport location_access from \"../assets/confirm.svg\";\nimport location_search from \"../assets/location_search.svg\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    if (!this.props.isGeolocationAvailable) {\n      return (\n        <SplashScreen\n          svg={location_support}\n          message={\"Your browser does not support the Geolocation API.\"}\n        />\n      );\n    } else if (!this.props.isGeolocationEnabled) {\n      return (\n        <SplashScreen\n          svg={location_access}\n          message={\"Please enable location access.\"}\n        />\n      );\n    } else if (this.props.coords) {\n      return <NearWiki coords={this.props.coords} />;\n    } else {\n      return (\n        <SplashScreen\n          svg={location_search}\n          message={\"Finding landmarks near you...\"}\n        />\n      );\n    }\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: true\n  },\n  watchPosition: true,\n  userDecisionTimeout: 5000\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}